openapi: 3.0.0
info:
  title: HNG Boilerplate API
  description: A comprehensive API for managing various entities.
  version: 1.0.0
servers:
  - url: http://localhost:3000/api/v1
    description: Local server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    newUser:
      type: object
      properties:
        id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        password:
          type: string
        language_id:
          type: string
        bio:
          type: string
        created_at:
          type: string
          format: date-time
        role:
          type: string
          enum:
            - admin
            - user
      required:
        - name
        - email
        - password
    User:
      type: object
      properties:
        id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        language_id:
          type: string
        bio:
          type: string
        created_at:
          type: string
          format: date-time
        role:
          type: string
          enum:
            - admin
            - user
      required:
        - name
        - email
        - password

    Organisation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"
      required:
        - name

    WaitlistEntry:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time
      required:
        - email

    Payment:
      type: object
      properties:
        id:
          type: string
        amount:
          type: number
        date:
          type: string
          format: date-time
        status:
          type: string
        provider:
          type: string
          enum:
            - stripe
            - paypal
            - flutterwave
            - lemonSqueezy
        user:
          $ref: "#/components/schemas/User"
        created_at:
          type: string
          format: date-time

    ActivityLog:
      type: object
      properties:
        id:
          type: string
        action:
          type: string
        timestamp:
          type: string
          format: date-time
        userId:
          type: string
        created_at:
          type: string
          format: date-time

    Post:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        body:
          type: string
        user:
          $ref: "#/components/schemas/User"
        status:
          type: string
          enum:
            - active
            - inactive
        created_at:
          type: string
          format: date-time

    Language:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        code:
          type: string
        region_id:
          type: string
        created_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - code
        - region_id
        - created_at

    Region:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        created_at:
          type: string
          format: date-time
      required:
        - name

paths:
  /api/auth/register:
    post:
      summary: "Create a user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newUser"
      responses:
        201:
          description: "user successfully created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: "Bad request, invalid input"

  /api/auth/login:
    post:
      summary: "User login"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                cookie_consent:
                  type: string
                  enum: ["accepted", "rejected"]
      responses:
        200:
          description: "login successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: "Bad request, invalid input"

  /api/users/{id}:
    get:
      summary: "Fetch/Get User"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        200:
          description: "User data fetched successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized, authentication required"

  /api/users/changePassword:
    summary: "Change user password"
    patch:
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              properties:
                oldpassword:
                  type: string
                newPassword:
                  type: string
      responses:
        200:
          description: "user password changed successfully"
        400:
          description: "Bad request, invalid inputs"

  /api/organisations:
    post:
      summary: Create a new organisation
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organisation"
      responses:
        "201":
          description: Organisation successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organisation"
        "400":
          description: Bad request, invalid input
        "401":
          description: Unauthorized, authentication required
        "403":
          description: Forbidden, user does not have permission

    get:
      summary: Get all organisations
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Organisations successfully fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organisation"
        "401":
          description: Unauthorized, authentication required

  /api/organisations/{id}:
    get:
      summary: Get an organisation by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Organisation successfully fetched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organisation"
        "404":
          description: Organisation does not exist
        "400":
          description: Bad request
        "401":
          description: Unauthorized, authentication required

    patch:
      summary: Update an organisation by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organisation"
      responses:
        "200":
          description: Organisation successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organisation"
        "404":
          description: Organisation does not exist
        "400":
          description: Bad request
        "401":
          description: Unauthorized, authentication required

    delete:
      summary: Delete an organisation by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Organisation successfully deleted
        "404":
          description: Organisation does not exist
        "400":
          description: Bad request
        "401":
          description: Unauthorized, authentication required

  /api/organisations/user/{userId}:
    get:
      summary: Get organisations by user ID
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Organisations successfully fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organisation"
        "404":
          description: Organisations not found
        "400":
          description: Bad request
        "401":
          description: Unauthorized, authentication required

  /api/users/search:
    get:
      summary: "Search for user"
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: name
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
      responses:
        200:
          description:
          content:
            application/json:
              schema:
                type: array
        400:
          description: "Bad request"
        401:
          description: "Unauthorized, authentication required"

  /api/organisations/search:
    get:
      summary: "Search for organisation"
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: name
          schema:
            type: array
      responses:
        200:
          description:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organisation"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized, authentication required"

  /api/notifications:
    get:
      summary: Get all notifications
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Notifications list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    message:
                      type: string
                    timestamp:
                      type: string
                      format: date-time
        "401":
          description: Unauthorized, authentication required

  /api/notifications/{id}:
    get:
      summary: Get one notification by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Notification successfully fetched
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  message:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
        "401":
          description: Unauthorized, authentication required
        "404":
          description: Notification does not exist

  /api/invite:
    get:
      summary: Generate an invite link
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Invite link generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  inviteLink:
                    type: string
        "401":
          description: Unauthorized, authentication required

  /api/email:
    post:
      summary: Send an email to users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                subject:
                  type: string
                message:
                  type: string
      responses:
        "200":
          description: Email sent successfully
        "400":
          description: Bad request, invalid input
        "401":
          description: Unauthorized, authentication required

  /api/waitlist:
    get:
      summary: Get waitlist entries
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Waitlist data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WaitlistEntry"
        "401":
          description: Unauthorized, authentication required

    post:
      summary: Create waitlist entry
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WaitlistEntry"
      responses:
        "200":
          description: Waitlist entry created
        "401":
          description: Unauthorized, authentication required

  /api/superadmin/users:
    get:
      summary: Get all users (Admin only)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of users successfully fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized, authentication required
        "403":
          description: Forbidden, admin access required

  /api/superadmin/organisations:
    get:
      summary: Get all organisations (Admin only)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of organisations successfully fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organisation"
        "401":
          description: Unauthorized, authentication required
        "403":
          description: Forbidden, admin access required

  /api/superadmin/payments:
    get:
      summary: Get all payments (Admin only)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of payments successfully fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Payment"
        "401":
          description: Unauthorized, authentication required
        "403":
          description: Forbidden, admin access required

  /api/superadmin/activitylog:
    get:
      summary: Get activity log (Admin only)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Activity log successfully fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ActivityLog"
        "401":
          description: Unauthorized, authentication required
        "403":
          description: Forbidden, admin access required

  /api/blog:
    post:
      summary: Create post
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
      responses:
        "200":
          description: Post created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "401":
          description: Unauthorized, authentication required
    get:
      summary: Get all post
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Posts successfully fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "401":
          description: Unauthorized, authentication required

    patch:
      summary: Update an post by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
      responses:
        "200":
          description: Post successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          description: Post does not exist
        "400":
          description: Bad request
        "401":
          description: Unauthorized, authentication required

  /api/blog/{id}:
    delete:
      summary: Delete a blog post
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Blog post deleted successfully
        "401":
          description: Unauthorized, authentication required

  /api/languages:
    post:
    summary: Create a new language
    security:
      - bearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Language"
    responses:
      "201":
        description: Language created successfully
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Language"
      "401":
        description: Unauthorized, authentication required

    get:
      summary: Get all languages
      responses:
      "200":
        description: List of all languages
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Language"
      "401":
        description: Unauthorized, authentication required

  /api/languages/{id}:
    get:
    summary: Get a language by ID
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    responses:
      "200":
        description: Language details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Language"
      "401":
        description: Unauthorized, authentication required
      "404":
        description: Language does not exist

    patch:
      summary: Update a language
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NewLanguage"
      responses:
      "200":
        description: Language updated successfully
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Language"
      "401":
        description: Unauthorized, authentication required
      "404":
        description: Language does not exist

  delete:
    summary: Delete a language
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    responses:
      "204":
        description: Language deleted successfully
      "401":
        description: Unauthorized, authentication required

  /api/regions:
    post:
    summary: Create a new region
    security:
      - bearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Region"
    responses:
      "201":
        description: Region created successfully
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Region"
      "401":
        description: Unauthorized, authentication required
    get:
      summary: Get all regions
      security:
        - bearerAuth: []
      responses:
      "200":
        description: List of all regions
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Region"

  /api/regions/{id}:
    get:
      summary: Get a region by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Region details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Region"
    patch:
      summary: Update a region
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Region"
      responses:
        "200":
          description: Region updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Region"
        "401":
          description: Unauthorized, authentication required

    delete:
      summary: Delete a region
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Region deleted successfully
        "401":
          description: Unauthorized, authentication required
