openapi: 3.0.0
info:
  title: HNG Boilerplate API
  description: A comprehensive API for managing various entities.
  version: 1.0.0
servers:
  - url: http://localhost:3000/api/v1
    description: Local server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        password:
          type: string
         role:
          type: string
          enum:
            - admin
            - user
      required:
        - name
        - email
        - password

    Organisation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
      required:
        - name

      WaitlistEntry:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - email

         Payment:
      type: object
      properties:
        id:
          type: string
        amount:
          type: number
        date:
          type: string
          format: date-time
        status:
          type: string
        userId:
          type: string

    ActivityLog:
      type: object
      properties:
        id:
          type: string
        action:
          type: string
        timestamp:
          type: string
          format: date-time
        userId:
          type: string




paths:
  /api/organisations:
    post:
      summary: Create a new organisation
      security:
       - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organisation'
      responses:
        '201':
          description: Organisation successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation'
        '400':
          description: Bad request, invalid input
        '401':
          description: Unauthorized, authentication required
        '403':
          description: Forbidden, user does not have permission



/api/organisations:
  get:
    summary: get all organisations
    security:
      - bearerAuth: []
      requestBody:
        required: true
    responses:
        '200':
          description: Organisation successfully fetched
          content:
            application/json:
              schema:
                type: array
                $ref: '#/components/schemas/Organisation'
         '401':
          description: "Unauthorized, authentication required"

/api/organisations/${id}:
  get:
    summary: get all organisations
    security:
      - bearerAuth: []
      requestBody:
        required: true
    responses:
        '200':
          description: Organisation successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation'
          '404':
          description: "Organisation does not exist"
          '400':
          description: "Bad request"
          '401':
          description: "Unauthorized, authentication required"
   patch:
      summary: Update an organisation by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organisation'
      responses:
        '200':
          description: Organisation successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation'
        '404':
          description: Organisation does not exist
        '400':
          description: Bad request
        '401':
          description: Unauthorized, authentication required

    delete:
      summary: Delete an organisation by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Organisation successfully deleted
        '404':
          description: Organisation does not exist
        '400':
          description: Bad request
        '401':
          description: Unauthorized, authentication required


 api/organisations/user/{userId}:
    get:
      summary: Get organisations by user ID
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Organisations successfully fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organisation'
        '404':
          description: Organisations not found
        '404':
          description: User does not exist
        '400':
          description: Bad request
        '401':
          description: Unauthorized, authentication required
  

api/notifications:
    get:
      summary: Get all notifications
      responses:
        '200':
          description: Notifications list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    message:
                      type: string
                    timestamp:
                      type: string
                      format: date-time
        '401':
          description: Unauthorized, authentication required
      security:
        - bearerAuth: []


api/notifications/${id}:
  get:
    summary: Get one notification
    response:
    '200':
      description: Notification successfully fetched
      content:
      application/json:
        schema:
          type: object
          properties:
            id:
              type: string
            message:
              type: string
            timestamp:
              type: string
              format: date-time
     '401':
          description: Unauthorized, authentication required
       '404':
          description: "Notification does not exist"
      security:
        - bearerAuth: []


 api/invite:
    get:
      summary: Generate an invite link
      responses:
        '200':
          description: Invite link generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  inviteLink:
                    type: string
        '401':
          description: Unauthorized, authentication required
      security:
        - bearerAuth: []

api/email:
    post:
      summary: Send an email to users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                subject:
                  type: string
                message:
                  type: string
      responses:
        '200':
          description: Email sent successfully
        '400':
          description: Bad request, invalid input
        '401':
          description: Unauthorized, authentication required
      security:
        - bearerAuth: []


api/waitlist:
    get:
      summary: Get waitlist entries
      responses:
        '200':
          description: Waitlist data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WaitlistEntry'
      security:
        - bearerAuth: []


api/waitlist:
  post:
    summary: Create waitlist
    security:
       - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WaitlistEntry'
        response:
          '200':
          description: Waitlist created
           '401':
          description: Unauthorized, authentication required


api/superadmin/users:
    get:
      summary: Get all users (Admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users successfully fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized, authentication required
        '403':
          description: Forbidden, admin access required
    
api/superadmin/organisations:
    get:
      summary: Get all organisations (Admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of organisations successfully fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organisation'
        '401':
          description: Unauthorized, authentication required
        '403':
          description: Forbidden, admin access required

api/superadmin/payments:
    get:
      summary: Get all payments (Admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of payments successfully fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
        '401':
          description: Unauthorized, authentication required
        '403':
          description: Forbidden, admin access required

api/superadmin/activitylog:
    get:
      summary: Get activity log (Admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Activity log successfully fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityLog'
        '401':
          description: Unauthorized, authentication required
        '403':
          description: Forbidden, admin access required